// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: proto/consistenthash.proto

package consistenthash_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsistentHashClient is the client API for ConsistentHash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsistentHashClient interface {
	TestConnection(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	ComputeFingerTable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GenericResponse, error)
}

type consistentHashClient struct {
	cc grpc.ClientConnInterface
}

func NewConsistentHashClient(cc grpc.ClientConnInterface) ConsistentHashClient {
	return &consistentHashClient{cc}
}

func (c *consistentHashClient) TestConnection(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/consistenthash.ConsistentHash/TestConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consistentHashClient) ComputeFingerTable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/consistenthash.ConsistentHash/ComputeFingerTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsistentHashServer is the server API for ConsistentHash service.
// All implementations should embed UnimplementedConsistentHashServer
// for forward compatibility
type ConsistentHashServer interface {
	TestConnection(context.Context, *TestRequest) (*GenericResponse, error)
	ComputeFingerTable(context.Context, *Empty) (*GenericResponse, error)
}

// UnimplementedConsistentHashServer should be embedded to have forward compatible implementations.
type UnimplementedConsistentHashServer struct {
}

func (UnimplementedConsistentHashServer) TestConnection(context.Context, *TestRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (UnimplementedConsistentHashServer) ComputeFingerTable(context.Context, *Empty) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeFingerTable not implemented")
}

// UnsafeConsistentHashServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsistentHashServer will
// result in compilation errors.
type UnsafeConsistentHashServer interface {
	mustEmbedUnimplementedConsistentHashServer()
}

func RegisterConsistentHashServer(s grpc.ServiceRegistrar, srv ConsistentHashServer) {
	s.RegisterService(&ConsistentHash_ServiceDesc, srv)
}

func _ConsistentHash_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistentHashServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consistenthash.ConsistentHash/TestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistentHashServer).TestConnection(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsistentHash_ComputeFingerTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistentHashServer).ComputeFingerTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consistenthash.ConsistentHash/ComputeFingerTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistentHashServer).ComputeFingerTable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsistentHash_ServiceDesc is the grpc.ServiceDesc for ConsistentHash service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsistentHash_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consistenthash.ConsistentHash",
	HandlerType: (*ConsistentHashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestConnection",
			Handler:    _ConsistentHash_TestConnection_Handler,
		},
		{
			MethodName: "ComputeFingerTable",
			Handler:    _ConsistentHash_ComputeFingerTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/consistenthash.proto",
}
